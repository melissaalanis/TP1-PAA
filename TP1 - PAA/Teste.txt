
int movimenta_estudante(int** labirinto, int linhas, int colunas, int x, int y, int chaves, int nivel, Posicao* caminho, long long int* passos, int** visitados) {
    #if MODO_ANALISE == 1
        chamadas_recursivas++;
        if (nivel > nivel_maximo_recursao) nivel_maximo_recursao = nivel;
    #endif

    // Caso base: chegou na primeira linha
    if (x == 0) {
        caminho[*passos].x = x;
        caminho[*passos].y = y;
        (*passos)++;
        labirinto[x][y] = 9; // Marca como parte do caminho
        return 1;
    }

    // Verifica se já visitou a célula
    if (visitados[x][y]) return 0;

    // Marca a posição como visitada
    visitados[x][y] = 1;

    // Adiciona a posição atual ao caminho
    //caminho[*passos].x = x;
    //caminho[*passos].y = y;
    (*passos)++;

    // Movimentos possíveis (cima, esquerda, direita, baixo)
    int movimentos[4][2] = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
    int encontrou_saida = 0; // Flag para detectar saída

    for (int i = 0; i < 4; i++) {
        int novoX = x + movimentos[i][0];
        int novoY = y + movimentos[i][1];

        if (posicaoValida(labirinto, linhas, colunas, novoX, novoY, chaves)) {
            int novasChaves = chaves;

            // Atualiza número de chaves para portas (3) e bônus (4)
            if (labirinto[novoX][novoY] == 3) novasChaves--;
            if (labirinto[novoX][novoY] == 4) novasChaves++;

            // Garante que não entra em estados inválidos
            if (novasChaves >= 0) {
                if (movimenta_estudante(labirinto, linhas, colunas, novoX, novoY, novasChaves, nivel + 1, caminho, passos, visitados)) {
                    labirinto[x][y] = 9; // Marca como parte do caminho
                    encontrou_saida = 1;
                    break;
                }
            }
        }
    }

    if (!encontrou_saida) {
        // Desfaz a marcação da posição atual
        visitados[x][y] = 0;
        //(*passos)--; // Remove a posição do caminho
    }

    return encontrou_saida; // Retorna se encontrou a saída
}
